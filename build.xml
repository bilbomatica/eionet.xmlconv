<?xml version="1.0" encoding="UTF-8"?>
<!-- ================================================== -->
<!-- BUILDFILE FOR XMLCONV

	Ant reads all arguments from build.properties file.
		build.dir - directory where the application will be installed eg.  /tomcat/webapps
		servletapi.jar - servletapi.jar file location eg. /tomcat/common/lib/srvletapi.jar
		vhost - if tdefined, the application will be installed as a new virtual host. 
												Otherwise it is installed under webapps folder under existing virtual host.

	If build.properties doesn't exist yet, then make a copy from default.properties and rename it to build.properties. Modify properties, if needed.
	

     The main targets are:

	compile
	   compiles java classes into classes.dir.

	buildjar
	   builds xmlconv.jar into WEB-INF/lib directory. removes also compiled java classes from classes directory.

     install
        creates the correct deployment directory structure in the target build.dir and
        copies all web (jsp, xsl, xml,images, css and js), configuration (web.xml)
        related data there, java libraries and builds jar file.

     clean
        this target removes all compiled java classes from classes.dir,
        but does not touch the rest (jsp, html, xml, stylesheets etc.)

	test
		runs unit tests. 
		Set up test database and insert database connection properties into test/resource/gdem.properties file.
		Do not run the tests on operational database, because it will delete all data.
		
		Create database called 'xmlconv_test'
		GRANT ALL ON xmlconv_test.* to xmlconvtest@localhost identified by 'testpwd';
		Then you import the table structure as:
		mysql -u xmlconvtest -p xmlconv_test <db/gdem_init.sql
		

	 default is install 
  -->
<!-- use JAR instead of classes because it makes it easier to debug errors -->


<project name="xmlconv" default="compile" basedir=".">

	<target name="init">

        <condition property="build.properties.exists">
                <available file="build.properties" />
        </condition>

        <fail unless="build.properties.exists"
            message="Couldn't find build.properties file! Make a copy from default.properties and rename it to build.properties. Modify properties, if needed."/>

		<loadproperties srcFile="build.properties"/>

        <fail unless="build.dir"
            message="Mandatory build.dir property is missing in build.properties file. Please provide a directory name as build.dir property value where the application will be installed eg.  build.dir=/tomcat/webapps/webrod "/>

		<!-- set global properties for this build -->
		<property name="src" value="src"/>
		<property name="lib" value="public/WEB-INF/lib"/>
		<property name="classes.dir" value="${build.dir}/public/WEB-INF/classes"/>
		<property name="test" value="test"/>
		<property name="test-build" value="test/build"/>

		<!-- define external classpath, i.e. JARs and classes not found in WEB-INF/classes and WEB-INF/lib -->
		<path id="classpath.externals">
			<pathelement location="${servletapi.jar}"/>
		</path>

		<!-- define classpath for compile -->
		<path id="classpath.compile">
			<path refid="classpath.externals"/>
			<fileset dir="public/WEB-INF/lib">
				<include name="*.jar"/>
			</fileset>
		</path>

	</target>

	<!-- compile -->
	<target name="compile" depends="clean">
		<javac debug="on" deprecation="off" srcdir="${src}" destdir="${classes.dir}" description="compiles java classes into classes path">
            <classpath refid="classpath.compile"/>
        </javac>
	</target>

	<!-- install  -->
	<target name="install" depends="init, copyfiles">
		<antcall target="checkProps"/>
		<antcall target="create_context"/>
	</target>

	<!-- build xmlconv.jar -->
	<target name="buildjar" depends="compile">
		<jar basedir="${classes.dir}" jarfile="public/WEB-INF/lib/xmlconv.jar" includes="**/*.class"/>
		<delete dir="${classes.dir}/eionet" failonerror="false"/>
		<!--antcall target="clean"/-->
	</target>


	<!-- clean classes directory -->
	<target name="clean" depends="init">
		<delete dir="${classes.dir}/eionet"/>
		<delete file="public/WEB-INF/lib/xmlconv.jar" failonerror="false"/>
	</target>

<!--	##########################  	-->
<!-- 				CONTEXT related  targets  						-->
<!--	##########################  	-->

	<!-- if it is installed as a new virtual host, then create root context -->
	<target name="root_context" if="install.vhost" description="suggestion for creating virtual host in server.xml and installation instructions">
		<copy file="ROOT.xml" todir="${build.dir}" overwrite="true"/>
		<copy file="xmlconv_vhost_server.xml" todir="${build.dir}" overwrite="true"/>
		<echo>==================================================================</echo>
		<echo>=== You are installing GDEM application as a virtual host</echo>
		<echo>=== Remember to add a virtual host TAG into  the server.xml</echo>
		<echo>=== if not existing yet																		</echo>
		<echo>=== Look example at: ${build.dir}/xmlconv_vhost_server.xml	</echo>
		<echo>==================================================================</echo>
		<echo>=== NB! NO CONTEXT TAG IS NEEDED inside Host tag at server.xml</echo>
		<echo>=== Tomcat loads it from ${build.dir}/ROOT.xml							</echo>
		<echo>==================================================================</echo>
	</target>

	<!-- if it is installed under webapps folder under existing virtual host -->
	<target name="webapp_context" unless="install.vhost">
		<copy file="xmlconv.xml" todir="${build.dir}" overwrite="true"/>
	</target>
	
	<target name="create_context">
		<condition property="install.vhost">
			<equals arg1="${vhost}" arg2="true"/>
		</condition>
		<antcall target="root_context"/>
	</target>
	
<!--	##########################  	-->
<!--		CREATE and copy  targets			-->
<!--	##########################  	-->

	<!-- PREPARE folder structure -->
	<target name="prepare" description="Creates folder structure if not existing yet">
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${build.dir}/acl"/>
		<mkdir dir="${build.dir}/public"/>
		<mkdir dir="${build.dir}/public/schema"/>
		<mkdir dir="${build.dir}/public/WEB-INF"/>
		<mkdir dir="${build.dir}/public/WEB-INF/classes"/>
		<mkdir dir="${build.dir}/public/WEB-INF/lib"/>
	</target>


	<!-- COPYFILES -->
	<target name="copyfiles" depends="clean_resources,prepare,buildjar">
		<!-- we do not care about these files older versions -->
		<copy file="GDEMServices.xml" tofile="${build.dir}/GDEMServices.xml" overwrite="true"/>
		<copy todir="${build.dir}/public" overwrite="true">
			<fileset dir="public">
				<exclude name="**/*.java"/>
				<exclude name="**/*.properties"/>
				<exclude name="**/servlet-api.jar"/>
				<exclude name="**/jsp-api.jar"/>
				<exclude name="WEB-INF/classes/**"/>
			</fileset>
		</copy>
		<copy todir="${classes.dir}" overwrite="false">
			<fileset dir="${src}" includes="**/*.properties">
				<exclude name="**/*.class"/>
			</fileset>
		</copy>
		<copy todir="${build.dir}/acl" overwrite="false">
			<fileset dir="acl"/>
		</copy>
		<!-- should take care of not overwriting them -->
		<copy todir="${build.dir}/public/xsl">
			<fileset dir="public/xsl"/>
		</copy>
		<condition property="uit.needed">
			<not>
				<available file="${build.dir}/public/WEB-INF/classes/uit.properties"/>
			</not>
		</condition>
		<condition property="xmlconv.needed">
			<not>
				<available file="${build.dir}/public/WEB-INF/classes/gdem.properties"/>
			</not>
		</condition>
		<condition property="log4j.needed">
			<not>
				<available file="${build.dir}/public/WEB-INF/classes/log4j.properties"/>
			</not>
		</condition>
		<antcall target="copy_props"/>
	</target>
	<!-- Deletes *.jsp, *.jar files -->
	<target name="clean_resources">
		<delete  failonerror="false">
			<fileset dir="${build.dir}/public/WEB-INF/lib"/>
			<fileset dir="${build.dir}/public/WEB-INF/tiles"/>
		</delete>
	</target>


<!--	##########################  	-->
<!-- 	 	CHECK PROPERTIES targets 		-->
<!--	##########################  	-->
	<target name="checkProps">
		<loadproperties srcFile="${build.dir}/public/WEB-INF/classes/gdem.properties"/>
		<condition property="tmp.needed">
			<not>
				<isset property="tmp.folder"/>
			</not>
		</condition>
		<condition property="xsl.needed">
			<not>
				<isset property="xsl.folder"/>
			</not>
		</condition>
		<condition property="queries.needed">
			<not>
				<isset property="queries.folder"/>
			</not>
		</condition>
		<condition property="xmlfile.needed">
			<not>
				<isset property="xmlfile.folder"/>
			</not>
		</condition>
		<loadproperties srcFile="${build.dir}/public/WEB-INF/classes/uit.properties"/>
		<condition property="srvdef.not.available">
			<not>
				<available file="${services.definition.file}"/>
			</not>
		</condition>
		<condition property="xslfolder.not.exist">
			<and>
				<isset property="xsl.folder"/>
				<not>
					<available file="${xsl.folder}" type="dir"/>
				</not>
			</and>
		</condition>
		<condition property="queriesfolder.not.exist">
			<and>
				<isset property="queries.folder"/>
				<not>
					<available file="${queries.folder}" type="dir"/>
				</not>
			</and>
		</condition>
		<condition property="xmlfilefolder.not.exist">
			<and>
				<isset property="xmlfile.folder"/>
				<not>
					<available file="${build.dir}/public/${xmlfile.folder}" type="dir"/>
				</not>
			</and>
		</condition>
		<fail if="tmp.needed" message="Property 'tmp.folder'  is missing from ${build.dir}/public/WEB-INF/classes/gdem.properties"/>
		<fail if="xsl.needed" message="Property 'xsl.folder'  is missing from ${build.dir}/public/WEB-INF/classes/gdem.properties"/>
		<fail if="queries.needed" message="Property 'queries.folder'  is missing from ${build.dir}/public/WEB-INF/classes/gdem.properties"/>
		<fail if="xmlfile.needed" message="Property 'xmlfile.folder'  is missing from ${build.dir}/public/WEB-INF/classes/gdem.properties"/>
		<antcall target="warn_definition"/>
		<antcall target="warn_xsl"/>
		<antcall target="warn_queries"/>
		<antcall target="warn_xmlfile"/>
	</target>
	<target name="warn_xsl" if="xslfolder.not.exist">
		<echo message="========================================================================="/>
		<echo message="XSL folder was not available at: ${xsl.folder}"/>
		<echo message="Create the folder or make a change in gdem.properties"/>
		<echo message="========================================================================="/>
		<!--mkdir dir="${xsl.folder}"/-->
	</target>
	<target name="warn_queries" if="queriesfolder.not.exist">
		<echo message="========================================================================="/>
		<echo message="Queries folder was not available at: ${queries.folder}"/>
		<echo message="Create the folder or make a change in gdem.properties"/>
		<echo message="========================================================================="/>
		<!--mkdir dir="${xsl.folder}"/-->
	</target>
	<target name="warn_xmlfile" if="xmlfilefolder.not.exist">
		<!--echo message="========================================================================="/>
		<echo message="XMLfile folder was not available at: ${xmlfilefolder.folder}"/>
		<echo message="Create the folder or make a change in gdem.properties"/>
		<echo message="========================================================================="/-->
		<mkdir dir="${build.dir}/public/${xmlfile.folder}"/>
	</target>
	<target name="warn_definition" if="srvdef.not.available">
		<echo message="========================================================================="/>
		<echo message="Services definition file is not available at: ${services.definition.file}"/>
		<echo message="Please specify the correct location in uit.properties"/>
		<echo message="========================================================================="/>
	</target>
	<target name="copy_props">
		<antcall target="cp_uit"/>
		<antcall target="cp_xmlconv"/>
		<antcall target="cp_log4j"/>
		<copy file="${src}/ApplicationResources.properties" tofile="${build.dir}/public/WEB-INF/classes/ApplicationResources.properties" overwrite="true"/>
	</target>
	<target name="cp_uit" if="uit.needed">
		<echo message="buiiddir: ${build.dir}"/>
		<copy file="${src}/uit.properties" tofile="${build.dir}/public/WEB-INF/classes/uit.properties"/>
	</target>
	<target name="cp_log4j" if="log4j.needed">
		<copy file="${src}/log4j.properties" tofile="${build.dir}/public/WEB-INF/classes/log4j.properties"/>
	</target>
	<target name="cp_xmlconv" if="xmlconv.needed">
		<copy file="${src}/gdem.properties" tofile="${build.dir}/public/WEB-INF/classes/gdem.properties"/>
	</target>


<!--	##########################  	-->
<!-- 				TEST targets  		-->
<!--	##########################  	-->


	<!-- cleans the test/build directory -->
	<target name="clean-tests">
		<delete includeemptydirs="true">
			<fileset dir="test/build" includes="**/*"/>
		</delete>
	</target>

	<!-- copy properties target, unit test needs some properties from gdem.properties file -->
	<target name="copy-test-props">

		<!-- copy acl files, the tests might need these -->
		<mkdir dir="${test-build}/acl"/>
		<mkdir dir="${test-build}/tmp"/>
		<mkdir dir="${test-build}/dcm"/>
		<copy todir="${test-build}/acl" overwrite="false">
			<fileset dir="acl"/>
		</copy>

		<copy todir="${test-build}" overwrite="false">
			<fileset dir="${src}" includes="**/*.properties">
				<exclude name="**/*.class"/>
				<exclude name="gdem.properties"/>
			</fileset>
		</copy>

		<copy todir="${test-build}" overwrite="false">
			<fileset dir="${test}/resources"/>
		</copy>

		<copy todir="${test-build}/dcm" overwrite="false">
			<fileset dir="public/dcm"/>
		</copy>
		
		<!-- gdem.properties -->
		<loadproperties srcFile="${test-build}/gdem.properties"/>
		<replace file="${test-build}/gdem.properties" token="tmp.folder=${tmp.folder}" value="tmp.folder=${test-build}/tmp/"/>
		<replace file="${test-build}/gdem.properties" token="xsl.folder=${xsl.folder}" value="xsl.folder=${test-build}"/>

		<!-- log4j.properties -->
		<loadproperties srcFile="${test-build}/log4j.properties"/>
		<replace file="${test-build}/log4j.properties" token="log4j.appender.f.File=${log4j.appender.f.File}" value="log4j.appender.f.File=${test-build}/xmlconv-test.log"/>

		<!-- uit.properties -->
		<loadproperties srcFile="${test-build}/uit.properties"/>
		<replace file="${test-build}/uit.properties" token="application.acl.folder=${application.acl.folder}" value="application.acl.folder=${test-build}/acl"/>
		<replace file="${test-build}/uit.properties" token="application.localgroups.file=${application.localgroups.file}" value="application.localgroups.file=${test-build}/acl/gdem.group"/>
		<replace file="${test-build}/uit.properties" token="application.permissions.file=${application.permissions.file}" value="application.permissions.file=${test-build}/acl/gdem.prms"/>

	</target>
	
	<!-- compile target for compiling unit tests, expects classes-under-test compiled, refers to pre-defined paths -->
	<target name="compile-tests" depends="clean-tests,copy-test-props">
		
		<javac srcdir="${src}" destdir="${test-build}" debug="on">
			<classpath refid="classpath.compile"/>
		</javac>
		<javac srcdir="${test}/src" destdir="${test-build}" debug="on">
			<classpath refid="classpath.test"/>
		</javac>
	</target>

	<!-- copies seed for unit tests into the unit tests' build tree -->
	<target name="seed-tests">
		<copy todir="${test}/build" overwrite="true">
			<fileset dir="${test}/src">
				<include name="**/seed-*.*"/>
			</fileset>
		</copy>
	</target>

	<!-- define classpath to be used by JUnit -->
	<path id="classpath.test">
		<pathelement path="test/build"/>
		<path refid="classpath.compile"/>
		<fileset dir="test/lib">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- define src files to be included and/or excluded when JUnit searches for test cases -->
	<fileset id="fileset.test" dir="test/src">
		<include name="**/*Test.java"/>
	</fileset>

	<!-- test target, refers to pre-defined paths and filesets -->
  	<target name="test" depends="test_echo,init,compile-tests,seed-tests" description="Runs all found unit tests">
		<junit haltonfailure="yes" failureproperty="unittestFailed" showoutput="yes" printsummary="yes">
			<classpath refid="classpath.test" />
			<formatter type="brief" usefile="false"/>
			<batchtest fork="yes">				
				<fileset refid="fileset.test"/>
			</batchtest>
		</junit>
		<fail if="unittestFailed" message="One or more unit tests failed."/>
	</target>

	<target	name="test_echo">
		<echo message="****************************************************************************************"/>
		<echo message="Set up test databse, before running the tests."/>
		<echo message="Databse connection properties should be inserted into test/resources/gdem.properties file"/>
		<echo message="NB! Do not run the test on operational database"/>
		<echo message="****************************************************************************************"/>
	</target>

<!--	##########################  	-->
<!-- 				ZIP targets 							-->
<!--	##########################  	-->

	<!-- make gzip package for Linux-->
	<target name="make_gzip" depends="check_os" if="is_unix">
		<tar tarfile="../xmlconv.tar">
			<tarfileset dir="." prefix="xmlconv"/>
		</tar>
		<gzip zipfile="xmlconv.tar.gz" src="../xmlconv.tar"/>
		<!--delete file="xmlconv.tar"/-->
	</target>

	<!-- make zip package for Windows-->
	<target name="make_zip" depends="check_os" if="is_win">
		<!--target name="make_zip" depends="check_os" if="is_win"-->
		<zip destfile="../xmlconv.zip">
			<zipfileset dir="." prefix="xmlconv"/>
		</zip>
	</target>

	<!-- make zip packages -->
	<target name="make_package" depends="make_gzip,make_zip">
		<antcall target="clean"/>
	</target>

	<target name="clean_tar" if="is_unix">
		<!--delete file="xmlconv.tar.gz"/-->
		<delete file="xmlconv.tar"/>
	</target>
	<target name="clean_zip" if="is_win">
		<!--delete file="xmlconv.zip"/-->
	</target>

	<target name="check_os">
		<!--fail unless="prefix" message="Usage: ant install -Dprefix={directory to install}"/-->
		<condition property="is_win">
			<os family="windows"/>
		</condition>
		<condition property="is_unix">
			<os family="unix"/>
		</condition>
	</target>

</project>